#/usr/bin/python

import multiprocessing
import threading
import sys
import time
import Queue

globalqueue = []
queue = Queue.Queue()
#-------------------------------------------------------------------------------------
class threading_class(threading.Thread):
    def __init__(self, queue, thread):
        threading.Thread.__init__(self)
        self.queue = queue
        self.thread = thread

    def run(self):
        while True:
            sleeps = self.queue.get()
            thread = self.thread
            globalqueue.append((thread, sleeps))
            print "THREAD %d: Sleeping for %d seconds" % (thread, sleeps)
            time.sleep(sleeps)
            self.queue.task_done()

#-------------------------------------------------------------------------------------
def thread_me():
    print "Starting threads"
    sleeps = [5, 5, 5, 5]

    for thread in range(2):
        thread_worker = threading_class(queue, thread)
        thread_worker.setDaemon(True)
        thread_worker.start()

    for element in sleeps:
        queue.put(element)

    queue.join()
    print globalqueue

#-------------------------------------------------------------------------------------
class processing_class(multiprocessing.Process):
    def __init__(self, process):
        multiprocessing.Process.__init__(self)
        self.process = process


    def run(self):
        process = self.process
        print "Process %d" % (process)
        return 0

#-------------------------------------------------------------------------------------
def process_me():
    print "Starting processes"
    sleeps = [5, 5, 5, 5]

    p = []

    for process in range(2):
        process_worker = processing_class(process)
        #process_worker.daemon = True
        p.append(process_worker)
        process_worker.start()
        process_worker.join()


#-------------------------------------------------------------------------------------
if __name__ == "__main__":
    #thread_me()    
    process_me()
